#!/bin/bash


# Variables
ACCOUNTID=`echo $1 |awk -F "/" '{print $4}' |awk -F "-" '{print $1}' |tail -n1`
DATE=`echo $1 |awk -F "/" '{print $4}' | rev |awk -F "-" '{print $1 $2}' |awk -F "." '{print $2}' |rev`
IMPORTDATE=`date +"%Y%m%d"`

# Variables explanation
## ACCOUNTID
# It received the filename that comes from billing.sh script. This is the command performed by billing.sh:
# sh /files/scripts/aws-billing-csv.sh /files/csvdiff/626719614195-aws-billing-csv-2015-01.csv
# echo $1 = Prints the input file. Result: /files/csvdiff/626719614195-aws-billing-csv-2015-01.csv
# awk -F "/" '{print $4}' = From the $1 value, give me only the 4th field considering "/" as field separator Result: 626719614195-aws-billing-csv-2015-01.csv
# awk -F "-" '{print $1}' = From 626719614195-aws-billing-csv-2015-01.csv, give me only the 1st field considering "-" as field separator. Result: 626719614195
# tail -n1 = Show me only the first line (to avoid durty lines)
#
## DATE
# echo $1 = Prints the input file. Result: /files/csvdiff/626719614195-aws-billing-csv-2015-01.csv
# awk -F "/" '{print $4}' = From the $1 value, give me only the 4th field considering "/" as field separator Result: 626719614195-aws-billing-csv-2015-01.csv
# rev = Get the last result and revert it. Result: vsc.10-5102-vsc-gnillib-swa-591416917626
# awk -F "-" '{print $1 $2}' = From vsc.10-5102-vsc-gnillib-swa-591416917626 give me only the 1st and 2nd field, considering "-" as field separator. Result: vsc.105102
# awk -F "." '{print $2}'  = From vsc.105102 give me only the 2nd field considering "." as field separator. Result: 105102
# rev = Get the last result and revert it. Result: 201501
#
## IMPORTEDATE
# date +"%Y%m%d". Result is current date. ie: 20150326
#
# SQLOUT
# Here, all sql command are inside the variable SQLOUT. Then every output generated by query will be the variable value. In this case, the only output is the result of
# "SELECT ROW_COUNT();". This command generate this output:
##############
# SQL COUNT ()
# Numeric Value
##############
# SQLCOUNT=`echo $SQLOUT | sed 's/[^0-9]*//g'`
# sed 's/[^0-9]*//g'` = Get the result of "SELECT ROW_COUNT();" and give me only the numeric value.
# echo "$SQLCOUNT Rows Imported" = Print how many imported rows
# CVSOUT=`tail -n +2 $1 = Print the input file without headers
# wc = Count lines. Result: 724   22951  374749 (Lines / word, and byte counts)
# awk -F " " '{print $1}' = give me only the lines numbers from 724   22951  374749. Result: 724
# if [ $SQLCOUNT -eq $CVSOUT ] = Compares csv lines with imported rows

SQLOUT=`/usr/bin/mysql -h aximbillingdb.c178w1ceq84e.us-east-1.rds.amazonaws.com cloud_billing_db -e "

LOAD DATA LOCAL INFILE '$1'
INTO TABLE aws_billing_csv
FIELDS TERMINATED BY ','
ENCLOSED BY '\"'
IGNORE 1 LINES
(invoice_i_d,payer_account_id,linked_account_id,record_type,record_i_d,billing_period_start_date,billing_period_end_date,invoice_date,payer_account_name,linked_account_name,taxation_address,payer_p_o_number,product_code,product_name,seller_of_record,usage_type,operation,rate_id,item_description,usage_start_date,usage_end_date,usage_quantity,blended_rate,currency_code,cost_before_tax,credits,tax_amount,tax_type,total_cost) SET month_ = $DATE, account_ = $ACCOUNTID, imported_date = $IMPORTDATE ; " -e "SELECT ROW_COUNT();"`

SQLCOUNT=`echo $SQLOUT | sed 's/[^0-9]*//g'`
echo "$SQLCOUNT Rows Imported"

# Comparing csv File
CVSOUT=`tail -n +2 $1 |wc |awk -F " " '{print $1}'`

if [ $SQLCOUNT -eq $CVSOUT ]
then
	echo "CSV file $1 imported sucessfully"
else
	echo "Failed to import CSV file $1"

fi
